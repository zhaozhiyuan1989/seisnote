
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "obspydoc/plot_3_read_and_write.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_obspydoc_plot_3_read_and_write.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_obspydoc_plot_3_read_and_write.py:


读写地震数据
=========================

本节简单介绍如何利用 ObsPy 读写地震波形数据、地震目录和元数据。

.. GENERATED FROM PYTHON SOURCE LINES 7-11

.. code-block:: default


    import glob
    import obspy








.. GENERATED FROM PYTHON SOURCE LINES 12-30

读写波形数据
---------------------

ObsPy 利用 :func:`read() <obspy.core.stream.read>` 函数将各种格式的
地震数据（如 SAC、MiniSEED 等）读入 :class:`Stream <obspy.core.stream.Stream>` 中。

:class:`Stream <obspy.core.stream.Stream>` 类似于列表对象，可以包含多个
:class:`Trace <obspy.core.trace.Trace>`。

每个 :class:`Trace <obspy.core.trace.Trace>` 都包含指向连续时间序列的 ``data``
属性和指向所有元数据的 ``stats`` 属性。例如，``starttime`` 和 ``endtime`` 等
元数据都以字典形式储存在 :class:`Stats <obspy.core.trace.Stats>` 对象中。 

经过处理后，可以用 :meth:`write() <obspy.core.stream.Stream.write>` 方法将数据保存到本地。

下面举例说明：

**从服务器读取波形数据并写入到本地文件**

.. GENERATED FROM PYTHON SOURCE LINES 30-34

.. code-block:: default


    tr = obspy.read()  # 从服务器读取波形数据示例文件到 Stream 对象中
    print(tr)  # 打印 Stream 对象信息
    tr.write("test.mseed")  # 将波形数据保存到本地，可通过后缀名确定文件类型




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    3 Trace(s) in Stream:
    BW.RJOB..EHZ | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples
    BW.RJOB..EHN | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples
    BW.RJOB..EHE | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples




.. GENERATED FROM PYTHON SOURCE LINES 35-36

**从本地读取地震波形数据并转换格式存储到本地**

.. GENERATED FROM PYTHON SOURCE LINES 36-47

.. code-block:: default


    for file in glob.glob('*.sac'):  # 遍历当前目录中以 ".sac" 结尾的文件
        st = obspy.read(file)  # 将数据读取到以 st 命名的 Stream 对象中
        tr = st[0]  # 把 Stream 对象中的第一个 Trace 赋予变量 tr
        # 打印头段变量和经过处理的波形数据
        msg = "%s %s %f %f" % (tr.stats.station, str(tr.stats.starttime),tr.data.mean(), tr.data.std())  
        print(msg)
        print(tr.stats)  # 打印元数据
      # tr.write(file+".mseed", format="mseed")  # 以 mseed 格式存储至本地
        print("===================================================\n")
    







.. GENERATED FROM PYTHON SOURCE LINES 48-54

读写地震目录
-------------------

利用 :func:`read_events() <obspy.core.event.catalog.read_events>` 函数
读取地震目录到 :class:`Catalog <obspy.core.event.Catalog>` 对象，
然后通过 :meth:`write() <obspy.core.event.Catalog.write>` 方法保存到本地。

.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: default


    cat = obspy.read_events()  # 从服务器读取地震目录示例文件
    print(cat)  # 打印地震目录信息
    cat.write('events', format='kml')  # 以 kml格式存储至本地






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    3 Event(s) in Catalog:
    2012-04-04T14:21:42.300000Z | +41.818,  +79.689 | 4.4 mb | manual
    2012-04-04T14:18:37.000000Z | +39.342,  +41.044 | 4.3 ML | manual
    2012-04-04T14:08:46.000000Z | +38.017,  +37.736 | 3.0 ML | manual




.. GENERATED FROM PYTHON SOURCE LINES 61-68

读写元数据
-------------------

可以通过 :func:`read_inventory() <obspy.core.inventory.inventory.read_inventory>` 函数
读取元数据到 :class:`Inventory <obspy.core.inventory.inventory.Inventory>` 对象，
然后利用 :meth:`write() <obspy.core.inventory.inventory.Inventory.write>` 方法
将元数据保存到本地。

.. GENERATED FROM PYTHON SOURCE LINES 68-73

.. code-block:: default


    inv = obspy.read_inventory()  # 从服务器读取元数据示例文件
    print(inv)  # 打印元数据信息
    inv.write('inv.pz', format='sacpz')  # 以 pz 格式存储至本地





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Inventory created at 2014-03-03T11:07:06.198000Z
            Created by: fdsn-stationxml-converter/1.0.0
                        http://www.iris.edu/fdsnstationconverter
            Sending institution: Erdbebendienst Bayern
            Contains:
                    Networks (2):
                            BW, GR
                    Stations (5):
                            BW.RJOB (Jochberg, Bavaria, BW-Net) (3x)
                            GR.FUR (Fuerstenfeldbruck, Bavaria, GR-Net)
                            GR.WET (Wettzell, Bavaria, GR-Net)
                    Channels (30):
                            BW.RJOB..EHZ (3x), BW.RJOB..EHN (3x), BW.RJOB..EHE (3x), 
                            GR.FUR..BHZ, GR.FUR..BHN, GR.FUR..BHE, GR.FUR..HHZ, GR.FUR..HHN, 
                            GR.FUR..HHE, GR.FUR..LHZ, GR.FUR..LHN, GR.FUR..LHE, GR.FUR..VHZ, 
                            GR.FUR..VHN, GR.FUR..VHE, GR.WET..BHZ, GR.WET..BHN, GR.WET..BHE, 
                            GR.WET..HHZ, GR.WET..HHN, GR.WET..HHE, GR.WET..LHZ, GR.WET..LHN, 
                            GR.WET..LHE




.. GENERATED FROM PYTHON SOURCE LINES 74-75

删除临时文件

.. GENERATED FROM PYTHON SOURCE LINES 75-79

.. code-block:: default


    import os
    os.remove("test.mseed")
    os.remove("events.kml")
    os.remove("inv.pz")







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.200 seconds)


.. _sphx_glr_download_obspydoc_plot_3_read_and_write.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_3_read_and_write.py <plot_3_read_and_write.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_3_read_and_write.ipynb <plot_3_read_and_write.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
